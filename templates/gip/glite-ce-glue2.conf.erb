<%
thisce=@ce_def[@hostname]
clustername=thisce["ce_cluster"]
subclustername=thisce["ce_subcluster"]
ce_info=subclusters[subclustername]
ce_cpu_model=ce_info["ce_cpu_model"]
ce_cpu_speed=ce_info["ce_cpu_speed"]
ce_cpu_vendor=ce_info["ce_cpu_vendor"]
ce_inboundip=ce_info["ce_inboundip"]
ce_physcpu=ce_info["ce_physcpu"]
ce_logcpu=ce_info["ce_logcpu"]
ce_minphysmem=ce_info["ce_minphysmem"]
ce_minvirtmem=ce_info["ce_minvirtmem"]
ce_os=ce_info["ce_os"]
ce_os_name=ce_info["ce_os_name"]
ce_os_family=ce_info["ce_os_family"].downcase
ce_os_arch=ce_info["ce_os_arch"].downcase
ce_os_release=ce_info["ce_os_release"]
ce_os_version=ce_info["ce_os_version"]
ce_otherdescr=ce_info["ce_otherdescr"]
ce_outboundip=ce_info["ce_outboundip"]
ce_sf00=ce_info["ce_sf00"]
ce_si00=ce_info["ce_si00"]
ce_smpsize=ce_info["ce_smpsize"]
ce_runtimeenv=ce_info["ce_runtimeenv"]
if (ce_os_arch == "x86_64")
   ce_platform_type="amd64"
else
   ce_platform_type=ce_os_arch
end
subcluster_tmpdir=ce_info["subcluster_tmpdir"]
subcluster_wntmdir=ce_info["subcluster_wntmdir"]
-%>
# Site Id
SiteId = <%=@sitename%>

#
#
# Computing Service Id
# Provided by yaim variable COMPUTING_SERVICE_ID (required if we are in cluster mode)
# Otherwise Computing Service Id is hostname + the "_ComputingElement" string
<%if@clustermode-%>
ComputingServiceId = <%=@computing_service_id%>
<%else-%>
ComputingServiceId = <%=@fqdn-%>_ComputingElement
<%end%>
#
#
# NumberOfEndPointType
# 2 (CREAM-CE + RTEpublisher) if CEMon is deployed
# 3 otherwise 
NumberOfEndPointType = 2

#
#
# ImplementationVersion is the version of the CREAM service
ImplementationVersion=<%= defined? @creamversion ? @creamversion : 'undef'%>

#
#
# InterfaceVersion is the version of the Service interface
#fixme: hard coded
InterfaceVersion=2.1

#
#
# HealthStateHelper should be the full pathname of the /glite-info-service-test plus CREAM as argument
HealthStateHelper = /usr/bin/glite-info-service-test CREAM

#
#
# ServingState of the Computing Element. It should be usually set to production
ServingState = Production

#
#
# Owner should be the list of owner VO names
Owner =  <%=supported_vos.join(" ")%>  

#
#
# Argus is yes if this CREAM CE is using Argus as authorization mechanism
Argus = yes

#
#
# EMIES is yes if the CREAM CE provides the ES interface
EMIES = no

#
# 
#ACBR should be the list of AccessControlBaseRule strings to indicate who is allowed to 
# have access to the service - at the simplest this is the same as the
# Owner but with the VO names prefixed by "VO:"
<%acbrlist=''
@supported_vos.each do |vo| 
  acbrlist=acbrlist+" VO:"+vo 
end -%>
ACBR = <%=acbrlist%>

#
# ExecutionEnvironments
# The list of the ids of the Execution Environments
# Format: ExecutionEnvironments = (EE1, EE2, ..., EEn)
ExecutionEnvironments = (<%=@fqdn%>)

#
#
# CE_BATH_SYS is the batch system used by the CE. E.g. torque, lsf, etc
# It should be filled with the content of yaim variable CE_BATCH_SYS
CE_BATCH_SYS = <%=@batch_system%>

#
#
# BATCH_VERSION is the Version of the batch system
# It should be filled with the content of yaim variable BATCH_VERSION
BATCH_VERSION = <%=@batch_system-%>_<%=defined? @batchversion ? @batchversion : 'undef'%>

#
#
# CloseSEs is the list of the storage services close to this computing service
# Format: CloseSEs = (closeSE1, closeSE2, ..., closeSEn)
# Format of closeSEi: (StorageServiceid LocalPath RemotePath)
#CloseSEs = srm-lhcb.cern.ch srm-atlas.cern.ch srm-alice.cern.ch srm-cms.cern.ch srm-dteam.cern.ch srm-public.cern.ch srm-pps.cern.ch srm-eoscms.cern.ch srm-eosatlas.cern.ch
# 
<%CloseSEs=Array.new
CloseSEsFormatted=Array.new
@voenv.each do | vo, value |
  if ! CloseSEs.include?(value['vo_default_se'])
    CloseSEs.push(value['vo_default_se'])
    CloseSEsFormatted.push("("+value['vo_default_se']+" none none)")
  end
end-%>
CloseSEs = (<%=CloseSEsFormatted.join(', ')-%>)
#
#
# CE_CAPABILITY is the list of CE capabilities
# Format: CECapabilities = (capa1, capa2, ..., capaN)
CECapabilities = (<%=@ce_capability.join(",")-%>)

<%if ! @clustermode -%>
# CE in non-cluster mode
#
#
#
# ArchitecturePlatformType is the Platform Type of the WNs of the 
# specified EE
# It must be set for all the Execution Environments
# It should be filled with the content of yaim variable CE_OS_ARCH
ExecutionEnvironment_<%=@fqdn-%>_ArchitecturePlatformType = <%=ce_platform_type%>
#
# 
# PhysicalCPUs is the total number of real CPUs/physical chips, including 
# the nodes that are temporary down or offline 
# It must be set for all the Execution Environments
# It should be filled with the content of yaim variable CE_PHYSCPU
ExecutionEnvironment_<%=@fqdn-%>_PhysicalCPUs = <%=ce_physcpu%>
#
#
# LogicalCPUs is the total number of cores/hyperthreaded CPUs, including the 
# nodes that are temporary down or offline
# It must be set for all the Execution Environments
# It should be filled with the content of yaim variable CE_LOGCPU
ExecutionEnvironment_<%=@fqdn-%>_LogicalCPUs = <%=ce_logcpu%>
#
#
# SmpSize is the number of Logical CPUs (cores) of the WN
# It must be set for all the Execution Environments
# It should be filled with the content of yaim variable CE_SMPSIZE 
ExecutionEnvironment_<%=@fqdn-%>_SmpSize = <%=ce_smpsize%>
#
# 
# ProcessorVendor is the name of the processor vendor for the Worker Nodes
# It must be set for all the Execution Environments
# It should be filled with the content of yaim variable CE_CPU_VENDOR
ExecutionEnvironment_<%=@fqdn-%>_ProcessorVendor = <%=ce_cpu_vendor%>
#
#
# ProcessorModel is the name of the processor model as defined by the vendor 
# for the Worker Nodes
# It must be set for all the Execution Environments
# It should be filled with the content of yaim variable CE_CPU_MODEL
ExecutionEnvironment_<%=@fqdn-%>_ProcessorModel = <%=ce_cpu_model%>
#
#
# ProcessorClockSpeed is the processor clock speed expressed in MHz for the 
# Worker Nodes 
# It must be set for all the Execution Environments
# It should be filled with the content of yaim variable CE_CPU_SPEED
ExecutionEnvironment_<%=@fqdn-%>_ProcessorClockSpeed = <%=ce_cpu_speed%>
#
#
# MainMemoryRAMSize is the total physical memory of a WN expressed in MegaBytes
# It must be set for all the Execution Environments
# It should be filled with the content of yaim variable CE_MINPHYSMEM 
ExecutionEnvironment_<%=@fqdn-%>_MainMemoryRAMSize = <%=ce_minphysmem%>
#
#
# MainMemoryVirtualSize is the total virtual memory of a WN expressed in 
# MegaBytes.
# It must be set for all the Execution Environments
# It should be filled with the content of yaim variable CE_MINVIRTMEM
ExecutionEnvironment_<%=@fqdn-%>_MainMemoryVirtualSize = <%=ce_minvirtmem%>
#
# 
# OperatingSystemFamily should be filled with the OS family (e.g. linux)
# It must be set for all the Execution Environments
ExecutionEnvironment_<%=@fqdn-%>_OperatingSystemFamily = <%=ce_os_family%>
#
# 
# OperatingSystemName is the name of the operating system used on the Worker 
# Nodes 
# It must be set for all the Execution Environments
# It should be filled with the content of yaim variable CE_OS
ExecutionEnvironment_<%=@fqdn-%>_OperatingSystemName = <%=ce_os_name%>
#
# 
# OperatingSystemRelease is the release of the operating system used on the 
# Worker Nodes
# It must be set for all the Execution Environments
# It should be filled with the content of yaim variable CE_OS_RELEASE
ExecutionEnvironment_<%=@fqdn-%>_OperatingSystemRelease = <%=ce_os_release%>
# 
#
# NetworkAdapterInboundIP must be set to either FALSE or TRUE to express the 
# permission for inbound connectivity for the WNs
# It must be set for all the Execution Environments
# It should be filled with the content of yaim variable CE_INBOUNDIP
ExecutionEnvironment_<%=@fqdn-%>_NetworkAdapterInboundIP = <%=ce_inboundip%>
#
#
# NetworkAdapterOutboundIP must be set to either FALSE or TRUE to express 
# the permission for outbound connectivity for the WNs
# It must be set for all the Execution Environments
# It should be filled with the content of yaim variable CE_OUTBOUNDIP
ExecutionEnvironment_<%=@fqdn-%>_NetworkAdapterOutboundIP = <%=ce_outboundip%>
#
#
# Benchmarks is the list of benchmarks
# Format: Benchmarks = (Benchmark1, Benchmark2, .., Benchmarkn)
# Format of Benchmarki: (Type Value)
ExecutionEnvironment_<%=@fqdn-%>_Benchmarks = <%=@benchmark_info%>
#
#
# Cores is the number of cores per CPU of the Worker Nodes
# It must be set for all the Execution Environments
ExecutionEnvironment_<%=@fqdn-%>_Cores = <%=@cores%>

#
#
# Shares. The list of shares.
# Format: Shares = (share1, share2, ..., sharen)
<%
sharelist=Array.new
@grid_queues.each do | queue, value |
  vonames=value["vonames"]
  vonames.each do | owner |
     sharelist.push(queue+'_'+owner)
  end
end
-%>


Shares = ( <%=sharelist.join(',')-%> )



<%@grid_queues.each do | queue, value |
  vonames=value["vonames"]
  vonames.each do | owner | -%>
SHARE_<%=queue-%>_<%=owner-%>_QUEUENAME=<%=queue%>
SHARE_<%=queue-%>_<%=owner-%>_OWNER=<%=vonames.join(' ')%>
SHARE_<%=queue-%>_<%=owner-%>_ENDPOINTS=(<%=@fqdn-%>_org.glite.ce.<%=@ce_type.upcase-%>)
SHARE_<%=queue-%>_<%=owner-%>_EXECUTIONENVIRONMENTS=(<%=@fqdn-%>)
SHARE_<%=queue-%>_<%=owner-%>_ACBRS=( VO:<%=owner-%> )
SHARE_<%=queue-%>_<%=owner-%>_CEIDS=(<%=@fqdn-%>:<%=@ce_port-%>/<%=@ce_type-%>-<%=@batch_system-%>-<%=queue-%>)  
  <%end-%>
 <%end-%>
<%end-%>
